name: Run Security

on:
  push:
    branches:
      - main

env:
  SECURITY_SCAN_API_BASE: 'http://103.81.38.252:9090/v1/startSecurityScan'
  PROJECT_ID: '796f933f-18fa-44e4-a402-dade03d77be7'

  BLOCK_PIPELINE: 'false'
  BLOCK_CRITICAL: 'false'
  BLOCK_HIGH: 'false'
  BLOCK_MEDIUM: 'false'

  CRITICAL_THRESHOLD: '0'
  HIGH_THRESHOLD: '0'
  MEDIUM_THRESHOLD: '0'

  INTEGRATION_ID: '2b0e0ad0-4ef0-4fbc-9612-40f20b77c89b'

jobs:
  security-scan:
    runs-on: windows-latest

    steps:
      - name: Run Security Scan API
        shell: pwsh
        run: |
          Write-Host "Calling Security Scan API..."

          $apiUrl = "$env:SECURITY_SCAN_API_BASE/$env:PROJECT_ID"
          Write-Host "Final API URL: $apiUrl"

          $headers = @{ "Content-Type" = "application/json"; "Api-Key" = "$env:INTEGRATION_ID" }
          $response = Invoke-RestMethod -Method POST -Uri $apiUrl -Headers $headers -UseBasicParsing -ErrorAction Stop

          $responseJson = $response | ConvertTo-Json -Depth 10
          Write-Host "Scan Response: $responseJson"

          if ($responseJson -match '"message"\s*:\s*"token expired"') {
            throw "Token expired. Pipeline blocked immediately."
          }

          function Extract-Count {
            param ([string]$key)
            if ($responseJson -match ('"' + $key + '"\s*:\s*(\d+)')) {
              return [int]$Matches[1]
            } else {
              return 0
            }
          }

          $critical = $response.criticalCount
          $high     = $response.highCount
          $medium   = $response.mediumCount

          Write-Host "Severity Summary:"
          Write-Host "Critical: $critical"
          Write-Host "High: $high"
          Write-Host "Medium: $medium"

          if ($env:BLOCK_PIPELINE -eq 'true') {
            if ($env:BLOCK_CRITICAL -eq 'true' -and $critical -ge [int]$env:CRITICAL_THRESHOLD) {
              throw "Blocked due to Critical vulnerabilities exceeding threshold"
            }
            if ($env:BLOCK_HIGH -eq 'true' -and $high -ge [int]$env:HIGH_THRESHOLD) {
              throw "Blocked due to High vulnerabilities exceeding threshold"
            }
            if ($env:BLOCK_MEDIUM -eq 'true' -and $medium -ge [int]$env:MEDIUM_THRESHOLD) {
              throw "Blocked due to Medium vulnerabilities exceeding threshold"
            }
            Write-Host "No blocking severity thresholds exceeded. Pipeline continued."
          } else {
            Write-Host "Blocking disabled. Continuing pipeline regardless of severity."
          }

      - name: Post-processing
        run: echo "Post-processing steps completed."
