trigger:
  - main

  
  pool:
  vmImage: 'ubuntu-latest'



  variables:
  securityScanApi: 'https://06c2-45-252-74-134.ngrok-free.app/v1/startSecurityScan'
  projectId: 'a3089edd-2207-4875-9f3b-6415afa56bb2'
  integrationId: '48703a56-9478-46ea-b919-579933ca14b4'
  blockPipeline: 'true'
  blockCritical: 'false'
  blockHigh: 'false'
  blockMedium: 'true'
  criticalThreshold: '0'
  highThreshold: '0'
  mediumThreshold: '1'



  stages:
  - stage: SecurityScan
  jobs:
  - job: ScanJob
    steps:
    - script: |
      echo "Running Security Scan..."



      response=$(curl -s -X POST "$securityScanApi/$projectId" \
      -H "Content-Type: application/json" \
      -H "Api-Key: $integrationId")



      echo "Raw response: $response"



      if [[ "$response" == *'"message":"token expired"'* ]]; then
      echo "Token expired. Failing the pipeline."
      exit 1
      fi



      critical=$(echo "$response" | grep -o '"criticalCount":[0-9]*' | cut -d':' -f2)
      high=$(echo "$response" | grep -o '"highCount":[0-9]*' | cut -d':' -f2)
      medium=$(echo "$response" | grep -o '"mediumCount":[0-9]*' | cut -d':' -f2)



      echo "Critical vulnerabilities: $critical"
      echo "High vulnerabilities: $high"
      echo "Medium vulnerabilities: $medium"



      if [[ "$blockPipeline" == "true" ]]; then
      if [[ "$blockCritical" == "true" && "$critical" -ge "$criticalThreshold" ]]; then
        echo "Blocking: Critical threshold exceeded"
        exit 1
      fi
      if [[ "$blockHigh" == "true" && "$high" -ge "$highThreshold" ]]; then
        echo "Blocking: High threshold exceeded"
        exit 1
      fi
      if [[ "$blockMedium" == "true" && "$medium" -ge "$mediumThreshold" ]]; then
        echo "Blocking: Medium threshold exceeded"
        exit 1
      fi
      echo "No thresholds exceeded. Proceeding."
      else
      echo "Blocking disabled. Proceeding regardless of severity."
      fi
    displayName: 'Run Security Scan'
    env:
      securityScanApi: $(securityScanApi)
      projectId: $(projectId)
      integrationId: $(integrationId)
      blockPipeline: $(blockPipeline)
      blockCritical: $(blockCritical)
      blockHigh: $(blockHigh)
      blockMedium: $(blockMedium)
      criticalThreshold: $(criticalThreshold)
      highThreshold: $(highThreshold)
      mediumThreshold: $(mediumThreshold)



  - stage: PostProcessing
  dependsOn: SecurityScan
  condition: succeeded()
  jobs:
  - job: Cleanup
    steps:
    - script: echo "Post-processing stage complete."
    displayName: 'Post Cleanup'
  
